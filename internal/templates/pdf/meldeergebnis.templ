package pdf_templates

import (
  "fmt"
	"github.com/bata94/RegattaApi/internal/sqlc"
	"strconv"
	"time"
)

func curDayCheck(i int, rennen []RennenMeldeergebnisPDF) string {
	if i == 0 || rennen[i-1].Tag != rennen[i].Tag {
		if rennen[i].Tag == "sa" {
			return "Samstag:"
		} else if rennen[i].Tag == "so" {
			return "Sonntag:"
		} else {
			return "Error?!"
		}
	}
	return ""
}

func curWettkampfCheck(i int, rennen []RennenMeldeergebnisPDF) string {
	if i == 0 || rennen[i-1].Wettkampf != rennen[i].Wettkampf {
    return fmt.Sprint(rennen[i].Wettkampf) + ":"
	}
	return ""
}

func pauseCheck(i int, rennen []RennenMeldeergebnisPDF, pausen []PausenMeldeergebnisPDF) string {
  for _, p := range pausen {
    if p.NachRennenUuid == rennen[i].Uuid {
      return fmt.Sprint(">>> Pause f체r ", p.Laenge, " Minuten <<<")
    }
  }
  return ""
}

type RennenMeldeergebnisPDF struct {
  Uuid string
	RennNr            string
	Bezeichnung       string
	BezeichnungZusatz string
	Startzeit         string
	Rennabstand       int
	Tag               string
	NumMeldungen      int
	NumAbteilungen    int
	Wettkampf         sqlc.Wettkampf
	Abteilungen       []AbteilungenMeldeergebnisPDF
	Abmeldungen       []MeldungMeldeergebnisPDF
}

type AbteilungenMeldeergebnisPDF struct {
	Nummer    int
	Meldungen []MeldungMeldeergebnisPDF
}

type MeldungMeldeergebnisPDF struct {
	StartNummer int
	Bahn        int
	Verein      string
	Teilnehmer  string
}

type PausenMeldeergebnisPDF struct {
  Id int
  Laenge int
  NachRennenUuid string
}

templ MeldungsEntry(m MeldungMeldeergebnisPDF) {
	<tr class="mt-8 border-none">
		<th class="w-1/12 font-bold text-center">
			{ strconv.Itoa(m.StartNummer) }
		</th>
		<th class="w-11/12 font-bold text-left">
			{ m.Verein }
		</th>
	</tr>
	<tr>
		<td></td>
		<td>
			{ m.Teilnehmer }
		</td>
	</tr>
}

templ MeldeErgebnis(rennen []RennenMeldeergebnisPDF, pausen []PausenMeldeergebnisPDF) {
	<h1>Meldeergebnis</h1>
	<h1>34. M체lheimer Jungen- und M채dchen-Regatta 2024</h1>
	<h6 class="mb-8">Stand: { time.Now().Format("02.01.2006 - 15:04:05 Uhr") }</h6>
	for i, r := range rennen {
		<div class="w-full no-break">
			<h1 class="underline underline-offset-2">{ curDayCheck(i, rennen) }</h1>
			<h1>{ curWettkampfCheck(i, rennen) }</h1>
			if r.NumAbteilungen != 0 {
				<h2 class="underline underline-offset-2">Rennen { r.RennNr } - { r.Bezeichnung }</h2>
				<h4>
					Startzeit: { r.Startzeit } Uhr,
					Rennabstand: { strconv.Itoa(r.Rennabstand) }
					if r.Rennabstand > 1 {
						Minuten
					} else {
						Minute
					}
				</h4>
				<h5>
					{ strconv.Itoa(r.NumMeldungen) }
					if r.NumMeldungen > 1 {
						Meldungen
					} else {
						Meldung
					}
					if r.Wettkampf != sqlc.WettkampfLangstrecke {
						in { strconv.Itoa(r.NumAbteilungen) }
						if r.NumAbteilungen> 1 {
							Abteilungen
						} else {
							Abteilung
						}
					}
				</h5>
				for _, a := range r.Abteilungen {
					<div class="mx-2 no-break">
						if r.Wettkampf != sqlc.WettkampfLangstrecke {
							<h3 class="">Abteilung { strconv.Itoa(a.Nummer) }:</h3>
						} else {
							<div class="h-4"></div>
						}
						<table class="my-2 table-fixed divide-y">
							for _, m := range a.Meldungen {
								@MeldungsEntry(m)
							}
						</table>
					</div>
				}
			} else {
				<h2 class="line-through">Rennen { r.RennNr } - { r.Bezeichnung } { r.BezeichnungZusatz }</h2>
				// <!--- <h5 class="mx-auto text-center text-red-600 font-bold">Keine Meldungen, Rennen entf채llt!</h5> --->
			}
			if len(r.Abmeldungen) != 0 {
				<div class="mx-2 no-break">
					<h4 class="">Abmeldungen:</h4>
					<table class="my-2 table-fixed">
						for _, m := range r.Abmeldungen {
							@MeldungsEntry(m)
						}
					</table>
				</div>
			}
      <h2 class="text-center">{ pauseCheck(i, rennen, pausen) }</h2>
		</div>
	}
}
