// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: zeitnahme_ergebnis.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createZeitnahmeErgebnis = `-- name: CreateZeitnahmeErgebnis :one
INSERT INTO zeitnahme_ergebnis (
  endzeit,
  zeitnahme_start_id,
  zeitnahme_ziel_id,
  meldung_uuid
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING id, endzeit, zeitnahme_start_id, zeitnahme_ziel_id, meldung_uuid
`

type CreateZeitnahmeErgebnisParams struct {
	Endzeit          float64   `json:"endzeit"`
	ZeitnahmeStartID int32     `json:"zeitnahme_start_id"`
	ZeitnahmeZielID  int32     `json:"zeitnahme_ziel_id"`
	MeldungUuid      uuid.UUID `json:"meldung_uuid"`
}

func (q *Queries) CreateZeitnahmeErgebnis(ctx context.Context, arg CreateZeitnahmeErgebnisParams) (ZeitnahmeErgebni, error) {
	row := q.db.QueryRow(ctx, createZeitnahmeErgebnis,
		arg.Endzeit,
		arg.ZeitnahmeStartID,
		arg.ZeitnahmeZielID,
		arg.MeldungUuid,
	)
	var i ZeitnahmeErgebni
	err := row.Scan(
		&i.ID,
		&i.Endzeit,
		&i.ZeitnahmeStartID,
		&i.ZeitnahmeZielID,
		&i.MeldungUuid,
	)
	return i, err
}

const getAllZeitnahmeErgebnis = `-- name: GetAllZeitnahmeErgebnis :many
SELECT id, endzeit, zeitnahme_start_id, zeitnahme_ziel_id, meldung_uuid FROM zeitnahme_ergebnis
ORDER BY id ASC
`

func (q *Queries) GetAllZeitnahmeErgebnis(ctx context.Context) ([]ZeitnahmeErgebni, error) {
	rows, err := q.db.Query(ctx, getAllZeitnahmeErgebnis)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ZeitnahmeErgebni{}
	for rows.Next() {
		var i ZeitnahmeErgebni
		if err := rows.Scan(
			&i.ID,
			&i.Endzeit,
			&i.ZeitnahmeStartID,
			&i.ZeitnahmeZielID,
			&i.MeldungUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getZeitnahmeErgebnisByMeld = `-- name: GetZeitnahmeErgebnisByMeld :one
SELECT id, endzeit, zeitnahme_start_id, zeitnahme_ziel_id, meldung_uuid FROM zeitnahme_ergebnis
WHERE meldung_uuid = $1 LIMIT 1
`

func (q *Queries) GetZeitnahmeErgebnisByMeld(ctx context.Context, meldungUuid uuid.UUID) (ZeitnahmeErgebni, error) {
	row := q.db.QueryRow(ctx, getZeitnahmeErgebnisByMeld, meldungUuid)
	var i ZeitnahmeErgebni
	err := row.Scan(
		&i.ID,
		&i.Endzeit,
		&i.ZeitnahmeStartID,
		&i.ZeitnahmeZielID,
		&i.MeldungUuid,
	)
	return i, err
}

const getZeitnahmeErgebnisMinimal = `-- name: GetZeitnahmeErgebnisMinimal :one
SELECT id, endzeit, zeitnahme_start_id, zeitnahme_ziel_id, meldung_uuid FROM zeitnahme_ergebnis
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetZeitnahmeErgebnisMinimal(ctx context.Context, id int32) (ZeitnahmeErgebni, error) {
	row := q.db.QueryRow(ctx, getZeitnahmeErgebnisMinimal, id)
	var i ZeitnahmeErgebni
	err := row.Scan(
		&i.ID,
		&i.Endzeit,
		&i.ZeitnahmeStartID,
		&i.ZeitnahmeZielID,
		&i.MeldungUuid,
	)
	return i, err
}
