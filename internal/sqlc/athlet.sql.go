// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: athlet.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAthlet = `-- name: CreateAthlet :one
INSERT INTO athlet
(uuid, verein_uuid, name, vorname, jahrgang, startberechtigt, geschlecht)
VALUES
($1, $2, $3, $4, $5, $6, $7)
RETURNING uuid, vorname, name, geschlecht, jahrgang, gewicht, startberechtigt, verein_uuid
`

type CreateAthletParams struct {
	Uuid            uuid.UUID  `json:"uuid"`
	VereinUuid      uuid.UUID  `json:"verein_uuid"`
	Name            string     `json:"name"`
	Vorname         string     `json:"vorname"`
	Jahrgang        string     `json:"jahrgang"`
	Startberechtigt bool       `json:"startberechtigt"`
	Geschlecht      Geschlecht `json:"geschlecht"`
}

func (q *Queries) CreateAthlet(ctx context.Context, arg CreateAthletParams) (Athlet, error) {
	row := q.db.QueryRow(ctx, createAthlet,
		arg.Uuid,
		arg.VereinUuid,
		arg.Name,
		arg.Vorname,
		arg.Jahrgang,
		arg.Startberechtigt,
		arg.Geschlecht,
	)
	var i Athlet
	err := row.Scan(
		&i.Uuid,
		&i.Vorname,
		&i.Name,
		&i.Geschlecht,
		&i.Jahrgang,
		&i.Gewicht,
		&i.Startberechtigt,
		&i.VereinUuid,
	)
	return i, err
}

const getAllAthlet = `-- name: GetAllAthlet :many
SELECT uuid, vorname, name, geschlecht, jahrgang, gewicht, startberechtigt, verein_uuid FROM athlet
ORDER BY name ASC
`

func (q *Queries) GetAllAthlet(ctx context.Context) ([]Athlet, error) {
	rows, err := q.db.Query(ctx, getAllAthlet)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Athlet{}
	for rows.Next() {
		var i Athlet
		if err := rows.Scan(
			&i.Uuid,
			&i.Vorname,
			&i.Name,
			&i.Geschlecht,
			&i.Jahrgang,
			&i.Gewicht,
			&i.Startberechtigt,
			&i.VereinUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAthletenForVereinMissStartber = `-- name: GetAllAthletenForVereinMissStartber :many
SELECT DISTINCT
  athlet.uuid, athlet.vorname, athlet.name, athlet.geschlecht, athlet.jahrgang, athlet.gewicht, athlet.startberechtigt, athlet.verein_uuid,
  rennen.uuid, rennen.sort_id, rennen.nummer, rennen.bezeichnung, rennen.bezeichnung_lang, rennen.zusatz, rennen.leichtgewicht, rennen.geschlecht, rennen.bootsklasse, rennen.bootsklasse_lang, rennen.altersklasse, rennen.altersklasse_lang, rennen.tag, rennen.wettkampf, rennen.kosten_eur, rennen.rennabstand, rennen.startzeit
FROM
  athlet
JOIN
  link_meldung_athlet
ON
  athlet.uuid = link_meldung_athlet.athlet_uuid
JOIN
  meldung
ON
  link_meldung_athlet.meldung_uuid = meldung.uuid
JOIN
  rennen
ON
  meldung.rennen_uuid = rennen.uuid
WHERE
  meldung.verein_uuid = $1 AND
  meldung.abgemeldet = false AND
  athlet.startberechtigt = false
ORDER BY
  athlet.name, athlet.vorname
`

type GetAllAthletenForVereinMissStartberRow struct {
	Athlet Athlet `json:"athlet"`
	Rennen Rennen `json:"rennen"`
}

func (q *Queries) GetAllAthletenForVereinMissStartber(ctx context.Context, vereinUuid uuid.UUID) ([]GetAllAthletenForVereinMissStartberRow, error) {
	rows, err := q.db.Query(ctx, getAllAthletenForVereinMissStartber, vereinUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllAthletenForVereinMissStartberRow{}
	for rows.Next() {
		var i GetAllAthletenForVereinMissStartberRow
		if err := rows.Scan(
			&i.Athlet.Uuid,
			&i.Athlet.Vorname,
			&i.Athlet.Name,
			&i.Athlet.Geschlecht,
			&i.Athlet.Jahrgang,
			&i.Athlet.Gewicht,
			&i.Athlet.Startberechtigt,
			&i.Athlet.VereinUuid,
			&i.Rennen.Uuid,
			&i.Rennen.SortID,
			&i.Rennen.Nummer,
			&i.Rennen.Bezeichnung,
			&i.Rennen.BezeichnungLang,
			&i.Rennen.Zusatz,
			&i.Rennen.Leichtgewicht,
			&i.Rennen.Geschlecht,
			&i.Rennen.Bootsklasse,
			&i.Rennen.BootsklasseLang,
			&i.Rennen.Altersklasse,
			&i.Rennen.AltersklasseLang,
			&i.Rennen.Tag,
			&i.Rennen.Wettkampf,
			&i.Rennen.KostenEur,
			&i.Rennen.Rennabstand,
			&i.Rennen.Startzeit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAthletenForVereinWaage = `-- name: GetAllAthletenForVereinWaage :many
SELECT DISTINCT
  athlet.uuid, athlet.vorname, athlet.name, athlet.geschlecht, athlet.jahrgang, athlet.gewicht, athlet.startberechtigt, athlet.verein_uuid,
  rennen.uuid, rennen.sort_id, rennen.nummer, rennen.bezeichnung, rennen.bezeichnung_lang, rennen.zusatz, rennen.leichtgewicht, rennen.geschlecht, rennen.bootsklasse, rennen.bootsklasse_lang, rennen.altersklasse, rennen.altersklasse_lang, rennen.tag, rennen.wettkampf, rennen.kosten_eur, rennen.rennabstand, rennen.startzeit
FROM
  athlet
JOIN
  link_meldung_athlet
ON
  athlet.uuid = link_meldung_athlet.athlet_uuid
JOIN
  meldung
ON
  link_meldung_athlet.meldung_uuid = meldung.uuid
JOIN
  rennen
ON
  meldung.rennen_uuid = rennen.uuid
WHERE
  meldung.verein_uuid = $1 AND
  rennen.leichtgewicht = true AND
  meldung.abgemeldet = false AND
  link_meldung_athlet.rolle = 'Ruderer' AND
  athlet.gewicht = 0
ORDER BY
  athlet.name, athlet.vorname, rennen.sort_id
`

type GetAllAthletenForVereinWaageRow struct {
	Athlet Athlet `json:"athlet"`
	Rennen Rennen `json:"rennen"`
}

func (q *Queries) GetAllAthletenForVereinWaage(ctx context.Context, vereinUuid uuid.UUID) ([]GetAllAthletenForVereinWaageRow, error) {
	rows, err := q.db.Query(ctx, getAllAthletenForVereinWaage, vereinUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllAthletenForVereinWaageRow{}
	for rows.Next() {
		var i GetAllAthletenForVereinWaageRow
		if err := rows.Scan(
			&i.Athlet.Uuid,
			&i.Athlet.Vorname,
			&i.Athlet.Name,
			&i.Athlet.Geschlecht,
			&i.Athlet.Jahrgang,
			&i.Athlet.Gewicht,
			&i.Athlet.Startberechtigt,
			&i.Athlet.VereinUuid,
			&i.Rennen.Uuid,
			&i.Rennen.SortID,
			&i.Rennen.Nummer,
			&i.Rennen.Bezeichnung,
			&i.Rennen.BezeichnungLang,
			&i.Rennen.Zusatz,
			&i.Rennen.Leichtgewicht,
			&i.Rennen.Geschlecht,
			&i.Rennen.Bootsklasse,
			&i.Rennen.BootsklasseLang,
			&i.Rennen.Altersklasse,
			&i.Rennen.AltersklasseLang,
			&i.Rennen.Tag,
			&i.Rennen.Wettkampf,
			&i.Rennen.KostenEur,
			&i.Rennen.Rennabstand,
			&i.Rennen.Startzeit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllNNAthleten = `-- name: GetAllNNAthleten :many
SELECT uuid, vorname, name, geschlecht, jahrgang, gewicht, startberechtigt, verein_uuid FROM athlet
WHERE vorname = 'No' and name = 'Name' and jahrgang = '9999'
ORDER BY verein_uuid ASC
`

func (q *Queries) GetAllNNAthleten(ctx context.Context) ([]Athlet, error) {
	rows, err := q.db.Query(ctx, getAllNNAthleten)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Athlet{}
	for rows.Next() {
		var i Athlet
		if err := rows.Scan(
			&i.Uuid,
			&i.Vorname,
			&i.Name,
			&i.Geschlecht,
			&i.Jahrgang,
			&i.Gewicht,
			&i.Startberechtigt,
			&i.VereinUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAthletMinimal = `-- name: GetAthletMinimal :one
SELECT uuid, vorname, name, geschlecht, jahrgang, gewicht, startberechtigt, verein_uuid FROM athlet
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetAthletMinimal(ctx context.Context, argUuid uuid.UUID) (Athlet, error) {
	row := q.db.QueryRow(ctx, getAthletMinimal, argUuid)
	var i Athlet
	err := row.Scan(
		&i.Uuid,
		&i.Vorname,
		&i.Name,
		&i.Geschlecht,
		&i.Jahrgang,
		&i.Gewicht,
		&i.Startberechtigt,
		&i.VereinUuid,
	)
	return i, err
}

const updateAthletAerztlBesch = `-- name: UpdateAthletAerztlBesch :exec
UPDATE
  athlet
SET
  startberechtigt = $1
WHERE
  uuid = $2
`

type UpdateAthletAerztlBeschParams struct {
	Startberechtigt bool      `json:"startberechtigt"`
	Uuid            uuid.UUID `json:"uuid"`
}

func (q *Queries) UpdateAthletAerztlBesch(ctx context.Context, arg UpdateAthletAerztlBeschParams) error {
	_, err := q.db.Exec(ctx, updateAthletAerztlBesch, arg.Startberechtigt, arg.Uuid)
	return err
}

const updateAthletWaage = `-- name: UpdateAthletWaage :exec
UPDATE
  athlet
SET
  gewicht = $1
WHERE
  uuid = $2
`

type UpdateAthletWaageParams struct {
	Gewicht pgtype.Int4 `json:"gewicht"`
	Uuid    uuid.UUID   `json:"uuid"`
}

func (q *Queries) UpdateAthletWaage(ctx context.Context, arg UpdateAthletWaageParams) error {
	_, err := q.db.Exec(ctx, updateAthletWaage, arg.Gewicht, arg.Uuid)
	return err
}
