// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rennen.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createRennen = `-- name: CreateRennen :one
INSERT INTO rennen (
  uuid,
  sort_id,
  nummer,
  bezeichnung,
  bezeichnung_lang,
  zusatz,
  leichtgewicht,
  geschlecht,
  bootsklasse,
  bootsklasse_lang,
  altersklasse,
  altersklasse_lang,
  tag,
  wettkampf,
  kosten_eur,
  rennabstand
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16
) RETURNING uuid, sort_id, nummer, bezeichnung, bezeichnung_lang, zusatz, leichtgewicht, geschlecht, bootsklasse, bootsklasse_lang, altersklasse, altersklasse_lang, tag, wettkampf, kosten_eur, rennabstand, startzeit
`

type CreateRennenParams struct {
	Uuid             uuid.UUID      `json:"uuid"`
	SortID           int32          `json:"sort_id"`
	Nummer           string         `json:"nummer"`
	Bezeichnung      *string        `json:"bezeichnung"`
	BezeichnungLang  *string        `json:"bezeichnung_lang"`
	Zusatz           *string        `json:"zusatz"`
	Leichtgewicht    *bool          `json:"leichtgewicht"`
	Geschlecht       NullGeschlecht `json:"geschlecht"`
	Bootsklasse      *string        `json:"bootsklasse"`
	BootsklasseLang  *string        `json:"bootsklasse_lang"`
	Altersklasse     *string        `json:"altersklasse"`
	AltersklasseLang *string        `json:"altersklasse_lang"`
	Tag              NullTag        `json:"tag"`
	Wettkampf        NullWettkampf  `json:"wettkampf"`
	KostenEur        *int32         `json:"kosten_eur"`
	Rennabstand      *int32         `json:"rennabstand"`
}

func (q *Queries) CreateRennen(ctx context.Context, arg CreateRennenParams) (*Rennen, error) {
	row := q.db.QueryRow(ctx, createRennen,
		arg.Uuid,
		arg.SortID,
		arg.Nummer,
		arg.Bezeichnung,
		arg.BezeichnungLang,
		arg.Zusatz,
		arg.Leichtgewicht,
		arg.Geschlecht,
		arg.Bootsklasse,
		arg.BootsklasseLang,
		arg.Altersklasse,
		arg.AltersklasseLang,
		arg.Tag,
		arg.Wettkampf,
		arg.KostenEur,
		arg.Rennabstand,
	)
	var i Rennen
	err := row.Scan(
		&i.Uuid,
		&i.SortID,
		&i.Nummer,
		&i.Bezeichnung,
		&i.BezeichnungLang,
		&i.Zusatz,
		&i.Leichtgewicht,
		&i.Geschlecht,
		&i.Bootsklasse,
		&i.BootsklasseLang,
		&i.Altersklasse,
		&i.AltersklasseLang,
		&i.Tag,
		&i.Wettkampf,
		&i.KostenEur,
		&i.Rennabstand,
		&i.Startzeit,
	)
	return &i, err
}

const getAllRennen = `-- name: GetAllRennen :many
SELECT uuid, sort_id, nummer, bezeichnung, bezeichnung_lang, zusatz, leichtgewicht, geschlecht, bootsklasse, bootsklasse_lang, altersklasse, altersklasse_lang, tag, wettkampf, kosten_eur, rennabstand, startzeit FROM rennen
ORDER BY sort_id ASC
`

func (q *Queries) GetAllRennen(ctx context.Context) ([]*Rennen, error) {
	rows, err := q.db.Query(ctx, getAllRennen)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Rennen
	for rows.Next() {
		var i Rennen
		if err := rows.Scan(
			&i.Uuid,
			&i.SortID,
			&i.Nummer,
			&i.Bezeichnung,
			&i.BezeichnungLang,
			&i.Zusatz,
			&i.Leichtgewicht,
			&i.Geschlecht,
			&i.Bootsklasse,
			&i.BootsklasseLang,
			&i.Altersklasse,
			&i.AltersklasseLang,
			&i.Tag,
			&i.Wettkampf,
			&i.KostenEur,
			&i.Rennabstand,
			&i.Startzeit,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRennenMinimal = `-- name: GetRennenMinimal :one
SELECT uuid, sort_id, nummer, bezeichnung, bezeichnung_lang, zusatz, leichtgewicht, geschlecht, bootsklasse, bootsklasse_lang, altersklasse, altersklasse_lang, tag, wettkampf, kosten_eur, rennabstand, startzeit FROM rennen
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetRennenMinimal(ctx context.Context, argUuid uuid.UUID) (*Rennen, error) {
	row := q.db.QueryRow(ctx, getRennenMinimal, argUuid)
	var i Rennen
	err := row.Scan(
		&i.Uuid,
		&i.SortID,
		&i.Nummer,
		&i.Bezeichnung,
		&i.BezeichnungLang,
		&i.Zusatz,
		&i.Leichtgewicht,
		&i.Geschlecht,
		&i.Bootsklasse,
		&i.BootsklasseLang,
		&i.Altersklasse,
		&i.AltersklasseLang,
		&i.Tag,
		&i.Wettkampf,
		&i.KostenEur,
		&i.Rennabstand,
		&i.Startzeit,
	)
	return &i, err
}
