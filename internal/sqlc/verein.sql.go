// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: verein.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createVerein = `-- name: CreateVerein :one
INSERT INTO verein (
  uuid,
  name,
  kurzform,
  kuerzel
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING uuid, name, kurzform, kuerzel
`

type CreateVereinParams struct {
	Uuid     uuid.UUID `json:"uuid"`
	Name     string    `json:"name"`
	Kurzform string    `json:"kurzform"`
	Kuerzel  string    `json:"kuerzel"`
}

func (q *Queries) CreateVerein(ctx context.Context, arg CreateVereinParams) (Verein, error) {
	row := q.db.QueryRow(ctx, createVerein,
		arg.Uuid,
		arg.Name,
		arg.Kurzform,
		arg.Kuerzel,
	)
	var i Verein
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Kurzform,
		&i.Kuerzel,
	)
	return i, err
}

const getAllVerein = `-- name: GetAllVerein :many
SELECT uuid, name, kurzform, kuerzel FROM verein
ORDER BY name ASC
`

func (q *Queries) GetAllVerein(ctx context.Context) ([]Verein, error) {
	rows, err := q.db.Query(ctx, getAllVerein)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Verein{}
	for rows.Next() {
		var i Verein
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Kurzform,
			&i.Kuerzel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRechnungungenByVerein = `-- name: GetRechnungungenByVerein :many
SELECT
  ulid, nummer, date, verein_uuid, cost_sum
FROM
  rechnung
WHERE
  verein_uuid = $1
ORDER BY
  ulid ASC
`

func (q *Queries) GetRechnungungenByVerein(ctx context.Context, vereinUuid uuid.UUID) ([]Rechnung, error) {
	rows, err := q.db.Query(ctx, getRechnungungenByVerein, vereinUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rechnung{}
	for rows.Next() {
		var i Rechnung
		if err := rows.Scan(
			&i.Ulid,
			&i.Nummer,
			&i.Date,
			&i.VereinUuid,
			&i.CostSum,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVerein = `-- name: GetVerein :one
SELECT
  verein.uuid, verein.name, verein.kurzform, verein.kuerzel,
  (SELECT COALESCE(SUM(meldung.kosten), 0) FROM meldung WHERE verein.uuid = meldung.verein_uuid) as ges_kosten,
  (SELECT COALESCE(SUM(zahlung.amount), 0) FROM zahlung WHERE verein.uuid = zahlung.verein_uuid) as ges_zahlungen
FROM
  verein
WHERE
  verein.uuid = $1
`

type GetVereinRow struct {
	Verein       Verein      `json:"verein"`
	GesKosten    interface{} `json:"ges_kosten"`
	GesZahlungen interface{} `json:"ges_zahlungen"`
}

func (q *Queries) GetVerein(ctx context.Context, argUuid uuid.UUID) (GetVereinRow, error) {
	row := q.db.QueryRow(ctx, getVerein, argUuid)
	var i GetVereinRow
	err := row.Scan(
		&i.Verein.Uuid,
		&i.Verein.Name,
		&i.Verein.Kurzform,
		&i.Verein.Kuerzel,
		&i.GesKosten,
		&i.GesZahlungen,
	)
	return i, err
}

const getVereinMinimal = `-- name: GetVereinMinimal :one
SELECT uuid, name, kurzform, kuerzel FROM verein
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetVereinMinimal(ctx context.Context, argUuid uuid.UUID) (Verein, error) {
	row := q.db.QueryRow(ctx, getVereinMinimal, argUuid)
	var i Verein
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Kurzform,
		&i.Kuerzel,
	)
	return i, err
}

const getVereinRechnungsnummern = `-- name: GetVereinRechnungsnummern :many
SELECT DISTINCT
   meldung.rechnungs_nummer
FROM
  meldung
INNER JOIN
  verein
ON
  meldung.verein_uuid = verein.uuid
WHERE
  verein.uuid = $1
`

func (q *Queries) GetVereinRechnungsnummern(ctx context.Context, argUuid uuid.UUID) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getVereinRechnungsnummern, argUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.Text{}
	for rows.Next() {
		var rechnungs_nummer pgtype.Text
		if err := rows.Scan(&rechnungs_nummer); err != nil {
			return nil, err
		}
		items = append(items, rechnungs_nummer)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
