// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users_group.sql

package sqlc

import (
	"context"
)

const createUserGroup = `-- name: CreateUserGroup :one
INSERT INTO users_group (
  name,
  allowed_admin
) VALUES (
  $1, $2
)
RETURNING ulid, name, allowed_admin, allowed_zeitnahme, allowed_startlisten, allowed_regattaleitung
`

type CreateUserGroupParams struct {
	Name         *string `json:"name"`
	AllowedAdmin *bool   `json:"allowed_admin"`
}

func (q *Queries) CreateUserGroup(ctx context.Context, arg CreateUserGroupParams) (*UsersGroup, error) {
	row := q.db.QueryRow(ctx, createUserGroup, arg.Name, arg.AllowedAdmin)
	var i UsersGroup
	err := row.Scan(
		&i.Ulid,
		&i.Name,
		&i.AllowedAdmin,
		&i.AllowedZeitnahme,
		&i.AllowedStartlisten,
		&i.AllowedRegattaleitung,
	)
	return &i, err
}

const getAllUserGroup = `-- name: GetAllUserGroup :many
SELECT ulid, name, allowed_admin, allowed_zeitnahme, allowed_startlisten, allowed_regattaleitung FROM users_group
ORDER BY ulid
`

func (q *Queries) GetAllUserGroup(ctx context.Context) ([]*UsersGroup, error) {
	rows, err := q.db.Query(ctx, getAllUserGroup)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*UsersGroup
	for rows.Next() {
		var i UsersGroup
		if err := rows.Scan(
			&i.Ulid,
			&i.Name,
			&i.AllowedAdmin,
			&i.AllowedZeitnahme,
			&i.AllowedStartlisten,
			&i.AllowedRegattaleitung,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroup = `-- name: GetUserGroup :many
SELECT users_group.ulid, users_group.name, users_group.allowed_admin, users_group.allowed_zeitnahme, users_group.allowed_startlisten, users_group.allowed_regattaleitung, users.ulid, users.username, users.hashed_password, users.is_active, users.group_ulid
FROM users_group
JOIN users
ON users_group.ulid = users.group_ulid
WHERE users_group.ulid = $1
`

type GetUserGroupRow struct {
	UsersGroup UsersGroup `json:"users_group"`
	User       User       `json:"user"`
}

func (q *Queries) GetUserGroup(ctx context.Context, ulid string) ([]*GetUserGroupRow, error) {
	rows, err := q.db.Query(ctx, getUserGroup, ulid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetUserGroupRow
	for rows.Next() {
		var i GetUserGroupRow
		if err := rows.Scan(
			&i.UsersGroup.Ulid,
			&i.UsersGroup.Name,
			&i.UsersGroup.AllowedAdmin,
			&i.UsersGroup.AllowedZeitnahme,
			&i.UsersGroup.AllowedStartlisten,
			&i.UsersGroup.AllowedRegattaleitung,
			&i.User.Ulid,
			&i.User.Username,
			&i.User.HashedPassword,
			&i.User.IsActive,
			&i.User.GroupUlid,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroupMinimal = `-- name: GetUserGroupMinimal :one
SELECT ulid, name, allowed_admin, allowed_zeitnahme, allowed_startlisten, allowed_regattaleitung
FROM users_group
WHERE users_group.ulid = $1
`

func (q *Queries) GetUserGroupMinimal(ctx context.Context, ulid string) (*UsersGroup, error) {
	row := q.db.QueryRow(ctx, getUserGroupMinimal, ulid)
	var i UsersGroup
	err := row.Scan(
		&i.Ulid,
		&i.Name,
		&i.AllowedAdmin,
		&i.AllowedZeitnahme,
		&i.AllowedStartlisten,
		&i.AllowedRegattaleitung,
	)
	return &i, err
}

const getUserGroupUlidByName = `-- name: GetUserGroupUlidByName :one
SELECT ulid
FROM users_group
WHERE name = $1
`

func (q *Queries) GetUserGroupUlidByName(ctx context.Context, name *string) (string, error) {
	row := q.db.QueryRow(ctx, getUserGroupUlidByName, name)
	var ulid string
	err := row.Scan(&ulid)
	return ulid, err
}
