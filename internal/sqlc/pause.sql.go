// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: pause.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createPause = `-- name: CreatePause :one
INSERT INTO pause (
  laenge,
  nach_rennen_uuid
) VALUES (
  $1,
  $2
)
RETURNING id, laenge, nach_rennen_uuid
`

type CreatePauseParams struct {
	Laenge         int32     `json:"laenge"`
	NachRennenUuid uuid.UUID `json:"nach_rennen_uuid"`
}

func (q *Queries) CreatePause(ctx context.Context, arg CreatePauseParams) (Pause, error) {
	row := q.db.QueryRow(ctx, createPause, arg.Laenge, arg.NachRennenUuid)
	var i Pause
	err := row.Scan(&i.ID, &i.Laenge, &i.NachRennenUuid)
	return i, err
}

const deletePause = `-- name: DeletePause :exec
DELETE FROM pause
WHERE id = $1
`

func (q *Queries) DeletePause(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePause, id)
	return err
}

const getAllPause = `-- name: GetAllPause :many
SELECT id, laenge, nach_rennen_uuid FROM pause
ORDER BY id ASC
`

func (q *Queries) GetAllPause(ctx context.Context) ([]Pause, error) {
	rows, err := q.db.Query(ctx, getAllPause)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pause{}
	for rows.Next() {
		var i Pause
		if err := rows.Scan(&i.ID, &i.Laenge, &i.NachRennenUuid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPause = `-- name: GetPause :one
SELECT id, laenge, nach_rennen_uuid FROM pause
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPause(ctx context.Context, id int32) (Pause, error) {
	row := q.db.QueryRow(ctx, getPause, id)
	var i Pause
	err := row.Scan(&i.ID, &i.Laenge, &i.NachRennenUuid)
	return i, err
}

const updatePause = `-- name: UpdatePause :one
UPDATE pause
SET laenge = $2
WHERE id = $1
RETURNING id, laenge, nach_rennen_uuid
`

type UpdatePauseParams struct {
	ID     int32 `json:"id"`
	Laenge int32 `json:"laenge"`
}

func (q *Queries) UpdatePause(ctx context.Context, arg UpdatePauseParams) (Pause, error) {
	row := q.db.QueryRow(ctx, updatePause, arg.ID, arg.Laenge)
	var i Pause
	err := row.Scan(&i.ID, &i.Laenge, &i.NachRennenUuid)
	return i, err
}
