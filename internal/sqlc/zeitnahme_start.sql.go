// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: zeitnahme_start.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createZeitnahmeStart = `-- name: CreateZeitnahmeStart :one
INSERT INTO zeitnahme_start (
  rennen_nummer,
  start_nummer,
  time_client,
  time_server,
  measured_latency
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, rennen_nummer, start_nummer, time_client, time_server, measured_latency, verarbeitet
`

type CreateZeitnahmeStartParams struct {
	RennenNummer    pgtype.Text      `json:"rennen_nummer"`
	StartNummer     string           `json:"start_nummer"`
	TimeClient      pgtype.Timestamp `json:"time_client"`
	TimeServer      pgtype.Timestamp `json:"time_server"`
	MeasuredLatency pgtype.Int4      `json:"measured_latency"`
}

func (q *Queries) CreateZeitnahmeStart(ctx context.Context, arg CreateZeitnahmeStartParams) (ZeitnahmeStart, error) {
	row := q.db.QueryRow(ctx, createZeitnahmeStart,
		arg.RennenNummer,
		arg.StartNummer,
		arg.TimeClient,
		arg.TimeServer,
		arg.MeasuredLatency,
	)
	var i ZeitnahmeStart
	err := row.Scan(
		&i.ID,
		&i.RennenNummer,
		&i.StartNummer,
		&i.TimeClient,
		&i.TimeServer,
		&i.MeasuredLatency,
		&i.Verarbeitet,
	)
	return i, err
}

const getAllZeitnahmeStart = `-- name: GetAllZeitnahmeStart :many
SELECT id, rennen_nummer, start_nummer, time_client, time_server, measured_latency, verarbeitet FROM zeitnahme_start
ORDER BY id ASC
`

func (q *Queries) GetAllZeitnahmeStart(ctx context.Context) ([]ZeitnahmeStart, error) {
	rows, err := q.db.Query(ctx, getAllZeitnahmeStart)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ZeitnahmeStart{}
	for rows.Next() {
		var i ZeitnahmeStart
		if err := rows.Scan(
			&i.ID,
			&i.RennenNummer,
			&i.StartNummer,
			&i.TimeClient,
			&i.TimeServer,
			&i.MeasuredLatency,
			&i.Verarbeitet,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getZeitnahmeStart = `-- name: GetZeitnahmeStart :one
SELECT id, rennen_nummer, start_nummer, time_client, time_server, measured_latency, verarbeitet FROM zeitnahme_start
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetZeitnahmeStart(ctx context.Context, id int32) (ZeitnahmeStart, error) {
	row := q.db.QueryRow(ctx, getZeitnahmeStart, id)
	var i ZeitnahmeStart
	err := row.Scan(
		&i.ID,
		&i.RennenNummer,
		&i.StartNummer,
		&i.TimeClient,
		&i.TimeServer,
		&i.MeasuredLatency,
		&i.Verarbeitet,
	)
	return i, err
}
