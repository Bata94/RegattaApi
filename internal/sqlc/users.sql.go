// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  group_ulid,
  username,
  hashed_password
) VALUES (
  $1, $2, $3
)
RETURNING ulid, username, hashed_password, is_active, group_ulid
`

type CreateUserParams struct {
	GroupUlid      string `json:"group_ulid"`
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.GroupUlid, arg.Username, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.Ulid,
		&i.Username,
		&i.HashedPassword,
		&i.IsActive,
		&i.GroupUlid,
	)
	return i, err
}

const getAllUser = `-- name: GetAllUser :many
SELECT ulid, username, hashed_password, is_active, group_ulid FROM users
ORDER BY ulid
`

func (q *Queries) GetAllUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Ulid,
			&i.Username,
			&i.HashedPassword,
			&i.IsActive,
			&i.GroupUlid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT users.ulid, users.username, users.hashed_password, users.is_active, users.group_ulid, users_group.ulid, users_group.name, users_group.allowed_admin, users_group.allowed_zeitnahme, users_group.allowed_startlisten, users_group.allowed_regattaleitung
FROM users
JOIN users_group
ON users.group_ulid = users_group.ulid
WHERE users.ulid = $1 LIMIT 1
`

type GetUserRow struct {
	User       User       `json:"user"`
	UsersGroup UsersGroup `json:"users_group"`
}

func (q *Queries) GetUser(ctx context.Context, ulid string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, ulid)
	var i GetUserRow
	err := row.Scan(
		&i.User.Ulid,
		&i.User.Username,
		&i.User.HashedPassword,
		&i.User.IsActive,
		&i.User.GroupUlid,
		&i.UsersGroup.Ulid,
		&i.UsersGroup.Name,
		&i.UsersGroup.AllowedAdmin,
		&i.UsersGroup.AllowedZeitnahme,
		&i.UsersGroup.AllowedStartlisten,
		&i.UsersGroup.AllowedRegattaleitung,
	)
	return i, err
}

const getUserMinimal = `-- name: GetUserMinimal :one
SELECT ulid, username, hashed_password, is_active, group_ulid FROM users
WHERE ulid = $1 LIMIT 1
`

func (q *Queries) GetUserMinimal(ctx context.Context, ulid string) (User, error) {
	row := q.db.QueryRow(ctx, getUserMinimal, ulid)
	var i User
	err := row.Scan(
		&i.Ulid,
		&i.Username,
		&i.HashedPassword,
		&i.IsActive,
		&i.GroupUlid,
	)
	return i, err
}

const getUserUlidByName = `-- name: GetUserUlidByName :one
SELECT ulid 
FROM users
WHERE username = $1
`

func (q *Queries) GetUserUlidByName(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, getUserUlidByName, username)
	var ulid string
	err := row.Scan(&ulid)
	return ulid, err
}
